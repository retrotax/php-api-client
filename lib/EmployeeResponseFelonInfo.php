<?php
/**
 * EmployeeResponseFelonInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  RetroTax
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Retrotax TCID
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2016-12-19T14:06:08Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RetroTax;

use \ArrayAccess;

/**
 * EmployeeResponseFelonInfo Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     RetroTax
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class EmployeeResponseFelonInfo implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'EmployeeResponse_felon_info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'conviction_date' => '\DateTime',
        'release_date' => '\DateTime',
        'is_federal_conviction' => 'bool',
        'is_state_conviction' => 'bool',
        'parole_officer_name' => 'string',
        'parole_officer_phone' => 'string',
        'felony_state' => 'string',
        'felony_county' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'conviction_date' => 'conviction_date',
        'release_date' => 'release_date',
        'is_federal_conviction' => 'is_federal_conviction',
        'is_state_conviction' => 'is_state_conviction',
        'parole_officer_name' => 'parole_officer_name',
        'parole_officer_phone' => 'parole_officer_phone',
        'felony_state' => 'felony_state',
        'felony_county' => 'felony_county'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'conviction_date' => 'setConvictionDate',
        'release_date' => 'setReleaseDate',
        'is_federal_conviction' => 'setIsFederalConviction',
        'is_state_conviction' => 'setIsStateConviction',
        'parole_officer_name' => 'setParoleOfficerName',
        'parole_officer_phone' => 'setParoleOfficerPhone',
        'felony_state' => 'setFelonyState',
        'felony_county' => 'setFelonyCounty'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'conviction_date' => 'getConvictionDate',
        'release_date' => 'getReleaseDate',
        'is_federal_conviction' => 'getIsFederalConviction',
        'is_state_conviction' => 'getIsStateConviction',
        'parole_officer_name' => 'getParoleOfficerName',
        'parole_officer_phone' => 'getParoleOfficerPhone',
        'felony_state' => 'getFelonyState',
        'felony_county' => 'getFelonyCounty'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['conviction_date'] = isset($data['conviction_date']) ? $data['conviction_date'] : null;
        $this->container['release_date'] = isset($data['release_date']) ? $data['release_date'] : null;
        $this->container['is_federal_conviction'] = isset($data['is_federal_conviction']) ? $data['is_federal_conviction'] : null;
        $this->container['is_state_conviction'] = isset($data['is_state_conviction']) ? $data['is_state_conviction'] : null;
        $this->container['parole_officer_name'] = isset($data['parole_officer_name']) ? $data['parole_officer_name'] : null;
        $this->container['parole_officer_phone'] = isset($data['parole_officer_phone']) ? $data['parole_officer_phone'] : null;
        $this->container['felony_state'] = isset($data['felony_state']) ? $data['felony_state'] : null;
        $this->container['felony_county'] = isset($data['felony_county']) ? $data['felony_county'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets conviction_date
     * @return \DateTime
     */
    public function getConvictionDate()
    {
        return $this->container['conviction_date'];
    }

    /**
     * Sets conviction_date
     * @param \DateTime $conviction_date Date of conviction. U.S. date formats only.
     * @return $this
     */
    public function setConvictionDate($conviction_date)
    {
        $this->container['conviction_date'] = $conviction_date;

        return $this;
    }

    /**
     * Gets release_date
     * @return \DateTime
     */
    public function getReleaseDate()
    {
        return $this->container['release_date'];
    }

    /**
     * Sets release_date
     * @param \DateTime $release_date Date of release. U.S. date formats only.
     * @return $this
     */
    public function setReleaseDate($release_date)
    {
        $this->container['release_date'] = $release_date;

        return $this;
    }

    /**
     * Gets is_federal_conviction
     * @return bool
     */
    public function getIsFederalConviction()
    {
        return $this->container['is_federal_conviction'];
    }

    /**
     * Sets is_federal_conviction
     * @param bool $is_federal_conviction Federal felony conviction.
     * @return $this
     */
    public function setIsFederalConviction($is_federal_conviction)
    {
        $this->container['is_federal_conviction'] = $is_federal_conviction;

        return $this;
    }

    /**
     * Gets is_state_conviction
     * @return bool
     */
    public function getIsStateConviction()
    {
        return $this->container['is_state_conviction'];
    }

    /**
     * Sets is_state_conviction
     * @param bool $is_state_conviction State felony conviction.
     * @return $this
     */
    public function setIsStateConviction($is_state_conviction)
    {
        $this->container['is_state_conviction'] = $is_state_conviction;

        return $this;
    }

    /**
     * Gets parole_officer_name
     * @return string
     */
    public function getParoleOfficerName()
    {
        return $this->container['parole_officer_name'];
    }

    /**
     * Sets parole_officer_name
     * @param string $parole_officer_name Parole officer name.
     * @return $this
     */
    public function setParoleOfficerName($parole_officer_name)
    {
        $this->container['parole_officer_name'] = $parole_officer_name;

        return $this;
    }

    /**
     * Gets parole_officer_phone
     * @return string
     */
    public function getParoleOfficerPhone()
    {
        return $this->container['parole_officer_phone'];
    }

    /**
     * Sets parole_officer_phone
     * @param string $parole_officer_phone 12 character limit (e.g. 317-925-0553).
     * @return $this
     */
    public function setParoleOfficerPhone($parole_officer_phone)
    {
        $this->container['parole_officer_phone'] = $parole_officer_phone;

        return $this;
    }

    /**
     * Gets felony_state
     * @return string
     */
    public function getFelonyState()
    {
        return $this->container['felony_state'];
    }

    /**
     * Sets felony_state
     * @param string $felony_state Felony state code(e.g MI, CA).
     * @return $this
     */
    public function setFelonyState($felony_state)
    {
        $this->container['felony_state'] = $felony_state;

        return $this;
    }

    /**
     * Gets felony_county
     * @return string
     */
    public function getFelonyCounty()
    {
        return $this->container['felony_county'];
    }

    /**
     * Sets felony_county
     * @param string $felony_county Felony county ID(e.g 12).
     * @return $this
     */
    public function setFelonyCounty($felony_county)
    {
        $this->container['felony_county'] = $felony_county;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\RetroTax\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\RetroTax\ObjectSerializer::sanitizeForSerialization($this));
    }
}


