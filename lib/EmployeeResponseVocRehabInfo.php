<?php
/**
 * EmployeeResponseVocRehabInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  RetroTax
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Retrotax TCID
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2016-12-19T14:06:08Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RetroTax;

use \ArrayAccess;

/**
 * EmployeeResponseVocRehabInfo Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     RetroTax
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class EmployeeResponseVocRehabInfo implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'EmployeeResponse_voc_rehab_info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'is_agency' => 'bool',
        'dept_va' => 'bool',
        'ttw' => 'bool',
        'address_line_1' => 'string',
        'address_line_2' => 'string',
        'agency_name' => 'string',
        'city' => 'string',
        'county' => 'string',
        'phone' => 'string',
        'state' => 'string',
        'zip' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'is_agency' => 'is_agency',
        'dept_va' => 'dept_va',
        'ttw' => 'ttw',
        'address_line_1' => 'address_line_1',
        'address_line_2' => 'address_line_2',
        'agency_name' => 'agency_name',
        'city' => 'city',
        'county' => 'county',
        'phone' => 'phone',
        'state' => 'state',
        'zip' => 'zip'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'is_agency' => 'setIsAgency',
        'dept_va' => 'setDeptVa',
        'ttw' => 'setTtw',
        'address_line_1' => 'setAddressLine1',
        'address_line_2' => 'setAddressLine2',
        'agency_name' => 'setAgencyName',
        'city' => 'setCity',
        'county' => 'setCounty',
        'phone' => 'setPhone',
        'state' => 'setState',
        'zip' => 'setZip'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'is_agency' => 'getIsAgency',
        'dept_va' => 'getDeptVa',
        'ttw' => 'getTtw',
        'address_line_1' => 'getAddressLine1',
        'address_line_2' => 'getAddressLine2',
        'agency_name' => 'getAgencyName',
        'city' => 'getCity',
        'county' => 'getCounty',
        'phone' => 'getPhone',
        'state' => 'getState',
        'zip' => 'getZip'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_agency'] = isset($data['is_agency']) ? $data['is_agency'] : null;
        $this->container['dept_va'] = isset($data['dept_va']) ? $data['dept_va'] : null;
        $this->container['ttw'] = isset($data['ttw']) ? $data['ttw'] : null;
        $this->container['address_line_1'] = isset($data['address_line_1']) ? $data['address_line_1'] : null;
        $this->container['address_line_2'] = isset($data['address_line_2']) ? $data['address_line_2'] : null;
        $this->container['agency_name'] = isset($data['agency_name']) ? $data['agency_name'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['county'] = isset($data['county']) ? $data['county'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['zip'] = isset($data['zip']) ? $data['zip'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets is_agency
     * @return bool
     */
    public function getIsAgency()
    {
        return $this->container['is_agency'];
    }

    /**
     * Sets is_agency
     * @param bool $is_agency Received vocational rehabilitation services from a vocational rehabilitation agency.
     * @return $this
     */
    public function setIsAgency($is_agency)
    {
        $this->container['is_agency'] = $is_agency;

        return $this;
    }

    /**
     * Gets dept_va
     * @return bool
     */
    public function getDeptVa()
    {
        return $this->container['dept_va'];
    }

    /**
     * Sets dept_va
     * @param bool $dept_va Whether or not employee received vocational rehabilitation services from department of veterans affairs.
     * @return $this
     */
    public function setDeptVa($dept_va)
    {
        $this->container['dept_va'] = $dept_va;

        return $this;
    }

    /**
     * Gets ttw
     * @return bool
     */
    public function getTtw()
    {
        return $this->container['ttw'];
    }

    /**
     * Sets ttw
     * @param bool $ttw Whether employee received vocational rehabilitation services from an Employment Network (Ticket to Work Program).
     * @return $this
     */
    public function setTtw($ttw)
    {
        $this->container['ttw'] = $ttw;

        return $this;
    }

    /**
     * Gets address_line_1
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['address_line_1'];
    }

    /**
     * Sets address_line_1
     * @param string $address_line_1 Agency address line 1.
     * @return $this
     */
    public function setAddressLine1($address_line_1)
    {
        $this->container['address_line_1'] = $address_line_1;

        return $this;
    }

    /**
     * Gets address_line_2
     * @return string
     */
    public function getAddressLine2()
    {
        return $this->container['address_line_2'];
    }

    /**
     * Sets address_line_2
     * @param string $address_line_2 Agency address line 2.
     * @return $this
     */
    public function setAddressLine2($address_line_2)
    {
        $this->container['address_line_2'] = $address_line_2;

        return $this;
    }

    /**
     * Gets agency_name
     * @return string
     */
    public function getAgencyName()
    {
        return $this->container['agency_name'];
    }

    /**
     * Sets agency_name
     * @param string $agency_name Name of the vocational rehabilitation center.
     * @return $this
     */
    public function setAgencyName($agency_name)
    {
        $this->container['agency_name'] = $agency_name;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city Agency city.
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets county
     * @return string
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     * @param string $county Agency county.
     * @return $this
     */
    public function setCounty($county)
    {
        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     * @param string $phone Agency phone #.
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state Agency state. Please use 2 digit state code from the states resource
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zip
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     * @param string $zip Agency?s zip code. 5 numerical digits and an optional 4 digit extension (e.g. 33706 or 46214-2524).
     * @return $this
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\RetroTax\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\RetroTax\ObjectSerializer::sanitizeForSerialization($this));
    }
}


