<?php
/**
 * DocumentsInner
 *
 * PHP version 5
 *
 * @category Class
 * @package  RetroTax
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Retrotax TCID
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2016-12-19T14:06:08Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RetroTax;

use \ArrayAccess;

/**
 * DocumentsInner Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     RetroTax
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DocumentsInner implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Documents_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'code' => 'string',
        'description' => 'string',
        'status' => 'string',
        'document_url' => 'string',
        'thumbnail_urls' => '\RetroTax\DocumentsInnerThumbnailUrls',
        'pdf_sample' => 'string',
        'image_sample' => 'string',
        'client_help_text' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'code' => 'code',
        'description' => 'description',
        'status' => 'status',
        'document_url' => 'document_url',
        'thumbnail_urls' => 'thumbnail_urls',
        'pdf_sample' => 'pdf_sample',
        'image_sample' => 'image_sample',
        'client_help_text' => 'client_help_text'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'code' => 'setCode',
        'description' => 'setDescription',
        'status' => 'setStatus',
        'document_url' => 'setDocumentUrl',
        'thumbnail_urls' => 'setThumbnailUrls',
        'pdf_sample' => 'setPdfSample',
        'image_sample' => 'setImageSample',
        'client_help_text' => 'setClientHelpText'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'code' => 'getCode',
        'description' => 'getDescription',
        'status' => 'getStatus',
        'document_url' => 'getDocumentUrl',
        'thumbnail_urls' => 'getThumbnailUrls',
        'pdf_sample' => 'getPdfSample',
        'image_sample' => 'getImageSample',
        'client_help_text' => 'getClientHelpText'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : 'FORM A';
        $this->container['description'] = isset($data['description']) ? $data['description'] : 'New Employee Form A';
        $this->container['status'] = isset($data['status']) ? $data['status'] : 'missing';
        $this->container['document_url'] = isset($data['document_url']) ? $data['document_url'] : '';
        $this->container['thumbnail_urls'] = isset($data['thumbnail_urls']) ? $data['thumbnail_urls'] : null;
        $this->container['pdf_sample'] = isset($data['pdf_sample']) ? $data['pdf_sample'] : '';
        $this->container['image_sample'] = isset($data['image_sample']) ? $data['image_sample'] : '';
        $this->container['client_help_text'] = isset($data['client_help_text']) ? $data['client_help_text'] : '';
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     * @param string $code The document code used by the API. This field is used to identify the type of document and shall be used while uploading the document using the POST method.
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description The description of the document which details what is expected for this document.
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status The status of the document for this employee. There will be three possible statuses. missing | pending | approved. Status missing indicates that the document is not yet uploaded. Pending indicates that the document has been uploaded by the hiring manager/employee and is under review by the Retrotax Staff. Approved indicates that the document has been uploaded by the hiring manager/employee and approved by the Retrotax Staff
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets document_url
     * @return string
     */
    public function getDocumentUrl()
    {
        return $this->container['document_url'];
    }

    /**
     * Sets document_url
     * @param string $document_url The link to access the uploaded document. If the status is missing, then this field shall be null.
     * @return $this
     */
    public function setDocumentUrl($document_url)
    {
        $this->container['document_url'] = $document_url;

        return $this;
    }

    /**
     * Gets thumbnail_urls
     * @return \RetroTax\DocumentsInnerThumbnailUrls
     */
    public function getThumbnailUrls()
    {
        return $this->container['thumbnail_urls'];
    }

    /**
     * Sets thumbnail_urls
     * @param \RetroTax\DocumentsInnerThumbnailUrls $thumbnail_urls
     * @return $this
     */
    public function setThumbnailUrls($thumbnail_urls)
    {
        $this->container['thumbnail_urls'] = $thumbnail_urls;

        return $this;
    }

    /**
     * Gets pdf_sample
     * @return string
     */
    public function getPdfSample()
    {
        return $this->container['pdf_sample'];
    }

    /**
     * Sets pdf_sample
     * @param string $pdf_sample Link to the PDF Sample of the document.
     * @return $this
     */
    public function setPdfSample($pdf_sample)
    {
        $this->container['pdf_sample'] = $pdf_sample;

        return $this;
    }

    /**
     * Gets image_sample
     * @return string
     */
    public function getImageSample()
    {
        return $this->container['image_sample'];
    }

    /**
     * Sets image_sample
     * @param string $image_sample Link to the Image Sample of the document.
     * @return $this
     */
    public function setImageSample($image_sample)
    {
        $this->container['image_sample'] = $image_sample;

        return $this;
    }

    /**
     * Gets client_help_text
     * @return string
     */
    public function getClientHelpText()
    {
        return $this->container['client_help_text'];
    }

    /**
     * Sets client_help_text
     * @param string $client_help_text The help section for the client to make understable about document.
     * @return $this
     */
    public function setClientHelpText($client_help_text)
    {
        $this->container['client_help_text'] = $client_help_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\RetroTax\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\RetroTax\ObjectSerializer::sanitizeForSerialization($this));
    }
}


