<?php
/**
 * EmployeeResponseEmployeeInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  RetroTax
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Retrotax TCID
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2016-12-19T14:06:08Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RetroTax;

use \ArrayAccess;

/**
 * EmployeeResponseEmployeeInfo Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     RetroTax
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class EmployeeResponseEmployeeInfo implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'EmployeeResponse_employee_info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'location_id' => 'int',
        'first_name' => 'string',
        'last_name' => 'string',
        'suffix' => 'string',
        'address_line_1' => 'string',
        'address_line_2' => 'string',
        'city' => 'string',
        'zip' => 'string',
        'state' => 'string',
        'county_id' => 'string',
        'ssn' => 'int',
        'dob' => '\DateTime',
        'rehire' => 'bool',
        'is_applicant' => 'bool'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'location_id' => 'location_id',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'suffix' => 'suffix',
        'address_line_1' => 'address_line_1',
        'address_line_2' => 'address_line_2',
        'city' => 'city',
        'zip' => 'zip',
        'state' => 'state',
        'county_id' => 'county_id',
        'ssn' => 'ssn',
        'dob' => 'dob',
        'rehire' => 'rehire',
        'is_applicant' => 'is_applicant'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'location_id' => 'setLocationId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'suffix' => 'setSuffix',
        'address_line_1' => 'setAddressLine1',
        'address_line_2' => 'setAddressLine2',
        'city' => 'setCity',
        'zip' => 'setZip',
        'state' => 'setState',
        'county_id' => 'setCountyId',
        'ssn' => 'setSsn',
        'dob' => 'setDob',
        'rehire' => 'setRehire',
        'is_applicant' => 'setIsApplicant'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'location_id' => 'getLocationId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'suffix' => 'getSuffix',
        'address_line_1' => 'getAddressLine1',
        'address_line_2' => 'getAddressLine2',
        'city' => 'getCity',
        'zip' => 'getZip',
        'state' => 'getState',
        'county_id' => 'getCountyId',
        'ssn' => 'getSsn',
        'dob' => 'getDob',
        'rehire' => 'getRehire',
        'is_applicant' => 'getIsApplicant'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : 'Oliver';
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : 'Queen';
        $this->container['suffix'] = isset($data['suffix']) ? $data['suffix'] : 'Jr.';
        $this->container['address_line_1'] = isset($data['address_line_1']) ? $data['address_line_1'] : '9000 Gennesse Avenue';
        $this->container['address_line_2'] = isset($data['address_line_2']) ? $data['address_line_2'] : 'University Townne Center';
        $this->container['city'] = isset($data['city']) ? $data['city'] : 'San Diego';
        $this->container['zip'] = isset($data['zip']) ? $data['zip'] : '92122';
        $this->container['state'] = isset($data['state']) ? $data['state'] : 'CA';
        $this->container['county_id'] = isset($data['county_id']) ? $data['county_id'] : '12';
        $this->container['ssn'] = isset($data['ssn']) ? $data['ssn'] : null;
        $this->container['dob'] = isset($data['dob']) ? $data['dob'] : null;
        $this->container['rehire'] = isset($data['rehire']) ? $data['rehire'] : null;
        $this->container['is_applicant'] = isset($data['is_applicant']) ? $data['is_applicant'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets location_id
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     * @param int $location_id The location id of the employee. The location id can be obtained for a company using the locations resource.
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name Employee's first name.
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name Employee's last name.
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets suffix
     * @return string
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     * @param string $suffix Possible String Options: Jr., Sr.,II, III, IV.
     * @return $this
     */
    public function setSuffix($suffix)
    {
        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets address_line_1
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['address_line_1'];
    }

    /**
     * Sets address_line_1
     * @param string $address_line_1 Employee's address line 1
     * @return $this
     */
    public function setAddressLine1($address_line_1)
    {
        $this->container['address_line_1'] = $address_line_1;

        return $this;
    }

    /**
     * Gets address_line_2
     * @return string
     */
    public function getAddressLine2()
    {
        return $this->container['address_line_2'];
    }

    /**
     * Sets address_line_2
     * @param string $address_line_2 Employee's address line 2
     * @return $this
     */
    public function setAddressLine2($address_line_2)
    {
        $this->container['address_line_2'] = $address_line_2;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city Employee's city of residence.
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets zip
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     * @param string $zip Employee's zip code. 5 numerical digits and an optional 4 digit extension (e.g. 33706 or 46214-2524).
     * @return $this
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state Employee's state of residence. 2 letter state abbreviation.
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets county_id
     * @return string
     */
    public function getCountyId()
    {
        return $this->container['county_id'];
    }

    /**
     * Sets county_id
     * @param string $county_id Employee's county id.
     * @return $this
     */
    public function setCountyId($county_id)
    {
        $this->container['county_id'] = $county_id;

        return $this;
    }

    /**
     * Gets ssn
     * @return int
     */
    public function getSsn()
    {
        return $this->container['ssn'];
    }

    /**
     * Sets ssn
     * @param int $ssn Employee's 9 digit Social Security Number with dashes. Format: XXX-XX-XXXX. Include leading zeroes if less than 9 digits.
     * @return $this
     */
    public function setSsn($ssn)
    {
        $this->container['ssn'] = $ssn;

        return $this;
    }

    /**
     * Gets dob
     * @return \DateTime
     */
    public function getDob()
    {
        return $this->container['dob'];
    }

    /**
     * Sets dob
     * @param \DateTime $dob Date of Birth. U.S. date formats only.
     * @return $this
     */
    public function setDob($dob)
    {
        $this->container['dob'] = $dob;

        return $this;
    }

    /**
     * Gets rehire
     * @return bool
     */
    public function getRehire()
    {
        return $this->container['rehire'];
    }

    /**
     * Sets rehire
     * @param bool $rehire Whether or not the employee has ever worked for this company before.
     * @return $this
     */
    public function setRehire($rehire)
    {
        $this->container['rehire'] = $rehire;

        return $this;
    }

    /**
     * Gets is_applicant
     * @return bool
     */
    public function getIsApplicant()
    {
        return $this->container['is_applicant'];
    }

    /**
     * Sets is_applicant
     * @param bool $is_applicant This field indicates whether the record is employee OR applicant.
     * @return $this
     */
    public function setIsApplicant($is_applicant)
    {
        $this->container['is_applicant'] = $is_applicant;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\RetroTax\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\RetroTax\ObjectSerializer::sanitizeForSerialization($this));
    }
}


