<?php
/**
 * EmployeeResponseQuestionnaire
 *
 * PHP version 5
 *
 * @category Class
 * @package  RetroTax
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Retrotax TCID
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2016-12-19T14:06:08Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RetroTax;

use \ArrayAccess;

/**
 * EmployeeResponseQuestionnaire Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     RetroTax
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class EmployeeResponseQuestionnaire implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'EmployeeResponse_questionnaire';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'afdc' => 'bool',
        'food_stamps' => 'bool',
        'ssi' => 'bool',
        'voc_rehab' => 'bool',
        'veteran' => 'bool',
        'unemployed' => 'bool',
        'felon' => 'bool',
        'cdib' => 'bool',
        'ca_farmer' => 'bool',
        'ca_foster' => 'bool',
        'ca_cal_works' => 'bool',
        'ca_misdemeanor' => 'bool',
        'ca_wia' => 'bool',
        'sc_fib' => 'bool'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'afdc' => 'afdc',
        'food_stamps' => 'food_stamps',
        'ssi' => 'ssi',
        'voc_rehab' => 'voc_rehab',
        'veteran' => 'veteran',
        'unemployed' => 'unemployed',
        'felon' => 'felon',
        'cdib' => 'cdib',
        'ca_farmer' => 'ca_farmer',
        'ca_foster' => 'ca_foster',
        'ca_cal_works' => 'ca_cal_works',
        'ca_misdemeanor' => 'ca_misdemeanor',
        'ca_wia' => 'ca_wia',
        'sc_fib' => 'sc_fib'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'afdc' => 'setAfdc',
        'food_stamps' => 'setFoodStamps',
        'ssi' => 'setSsi',
        'voc_rehab' => 'setVocRehab',
        'veteran' => 'setVeteran',
        'unemployed' => 'setUnemployed',
        'felon' => 'setFelon',
        'cdib' => 'setCdib',
        'ca_farmer' => 'setCaFarmer',
        'ca_foster' => 'setCaFoster',
        'ca_cal_works' => 'setCaCalWorks',
        'ca_misdemeanor' => 'setCaMisdemeanor',
        'ca_wia' => 'setCaWia',
        'sc_fib' => 'setScFib'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'afdc' => 'getAfdc',
        'food_stamps' => 'getFoodStamps',
        'ssi' => 'getSsi',
        'voc_rehab' => 'getVocRehab',
        'veteran' => 'getVeteran',
        'unemployed' => 'getUnemployed',
        'felon' => 'getFelon',
        'cdib' => 'getCdib',
        'ca_farmer' => 'getCaFarmer',
        'ca_foster' => 'getCaFoster',
        'ca_cal_works' => 'getCaCalWorks',
        'ca_misdemeanor' => 'getCaMisdemeanor',
        'ca_wia' => 'getCaWia',
        'sc_fib' => 'getScFib'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['afdc'] = isset($data['afdc']) ? $data['afdc'] : null;
        $this->container['food_stamps'] = isset($data['food_stamps']) ? $data['food_stamps'] : null;
        $this->container['ssi'] = isset($data['ssi']) ? $data['ssi'] : null;
        $this->container['voc_rehab'] = isset($data['voc_rehab']) ? $data['voc_rehab'] : null;
        $this->container['veteran'] = isset($data['veteran']) ? $data['veteran'] : null;
        $this->container['unemployed'] = isset($data['unemployed']) ? $data['unemployed'] : null;
        $this->container['felon'] = isset($data['felon']) ? $data['felon'] : null;
        $this->container['cdib'] = isset($data['cdib']) ? $data['cdib'] : null;
        $this->container['ca_farmer'] = isset($data['ca_farmer']) ? $data['ca_farmer'] : null;
        $this->container['ca_foster'] = isset($data['ca_foster']) ? $data['ca_foster'] : null;
        $this->container['ca_cal_works'] = isset($data['ca_cal_works']) ? $data['ca_cal_works'] : null;
        $this->container['ca_misdemeanor'] = isset($data['ca_misdemeanor']) ? $data['ca_misdemeanor'] : null;
        $this->container['ca_wia'] = isset($data['ca_wia']) ? $data['ca_wia'] : null;
        $this->container['sc_fib'] = isset($data['sc_fib']) ? $data['sc_fib'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets afdc
     * @return bool
     */
    public function getAfdc()
    {
        return $this->container['afdc'];
    }

    /**
     * Sets afdc
     * @param bool $afdc Whether or not employee or member of their household received Temporary Assistance to Needy Families (TANF) at any time since August 5, 1997.
     * @return $this
     */
    public function setAfdc($afdc)
    {
        $this->container['afdc'] = $afdc;

        return $this;
    }

    /**
     * Gets food_stamps
     * @return bool
     */
    public function getFoodStamps()
    {
        return $this->container['food_stamps'];
    }

    /**
     * Sets food_stamps
     * @param bool $food_stamps Whether or not employee or member of their household received food stamps during past 6 months.
     * @return $this
     */
    public function setFoodStamps($food_stamps)
    {
        $this->container['food_stamps'] = $food_stamps;

        return $this;
    }

    /**
     * Gets ssi
     * @return bool
     */
    public function getSsi()
    {
        return $this->container['ssi'];
    }

    /**
     * Sets ssi
     * @param bool $ssi Received SSI during past 6 months.
     * @return $this
     */
    public function setSsi($ssi)
    {
        $this->container['ssi'] = $ssi;

        return $this;
    }

    /**
     * Gets voc_rehab
     * @return bool
     */
    public function getVocRehab()
    {
        return $this->container['voc_rehab'];
    }

    /**
     * Sets voc_rehab
     * @param bool $voc_rehab Whether or not the employee received vocational rehabilitation services within the past 2 years.
     * @return $this
     */
    public function setVocRehab($voc_rehab)
    {
        $this->container['voc_rehab'] = $voc_rehab;

        return $this;
    }

    /**
     * Gets veteran
     * @return bool
     */
    public function getVeteran()
    {
        return $this->container['veteran'];
    }

    /**
     * Sets veteran
     * @param bool $veteran Whether or not the employee is a veteran of the United States Military.
     * @return $this
     */
    public function setVeteran($veteran)
    {
        $this->container['veteran'] = $veteran;

        return $this;
    }

    /**
     * Gets unemployed
     * @return bool
     */
    public function getUnemployed()
    {
        return $this->container['unemployed'];
    }

    /**
     * Sets unemployed
     * @param bool $unemployed Whether or not the employee has ever been unemployed at any time during the last 12 months.
     * @return $this
     */
    public function setUnemployed($unemployed)
    {
        $this->container['unemployed'] = $unemployed;

        return $this;
    }

    /**
     * Gets felon
     * @return bool
     */
    public function getFelon()
    {
        return $this->container['felon'];
    }

    /**
     * Sets felon
     * @param bool $felon Whether or not employee was convicted of felony or released from prison in last 12 months.
     * @return $this
     */
    public function setFelon($felon)
    {
        $this->container['felon'] = $felon;

        return $this;
    }

    /**
     * Gets cdib
     * @return bool
     */
    public function getCdib()
    {
        return $this->container['cdib'];
    }

    /**
     * Sets cdib
     * @param bool $cdib Whether or not the employee or the employee?s spouse is a member of a Native American Tribe.
     * @return $this
     */
    public function setCdib($cdib)
    {
        $this->container['cdib'] = $cdib;

        return $this;
    }

    /**
     * Gets ca_farmer
     * @return bool
     */
    public function getCaFarmer()
    {
        return $this->container['ca_farmer'];
    }

    /**
     * Sets ca_farmer
     * @param bool $ca_farmer Whether or not the employee is a migrant or seasonal farm worker. Default: false.
     * @return $this
     */
    public function setCaFarmer($ca_farmer)
    {
        $this->container['ca_farmer'] = $ca_farmer;

        return $this;
    }

    /**
     * Gets ca_foster
     * @return bool
     */
    public function getCaFoster()
    {
        return $this->container['ca_foster'];
    }

    /**
     * Sets ca_foster
     * @param bool $ca_foster Whether or not the employee is the child of foster parents. Default: false.
     * @return $this
     */
    public function setCaFoster($ca_foster)
    {
        $this->container['ca_foster'] = $ca_foster;

        return $this;
    }

    /**
     * Gets ca_cal_works
     * @return bool
     */
    public function getCaCalWorks()
    {
        return $this->container['ca_cal_works'];
    }

    /**
     * Sets ca_cal_works
     * @param bool $ca_cal_works Whether or not the employee is a recipient of CalWorks. Default: false.
     * @return $this
     */
    public function setCaCalWorks($ca_cal_works)
    {
        $this->container['ca_cal_works'] = $ca_cal_works;

        return $this;
    }

    /**
     * Gets ca_misdemeanor
     * @return bool
     */
    public function getCaMisdemeanor()
    {
        return $this->container['ca_misdemeanor'];
    }

    /**
     * Sets ca_misdemeanor
     * @param bool $ca_misdemeanor Whether or not the employee has ever been convicted of a misdemeanor. Default: false.
     * @return $this
     */
    public function setCaMisdemeanor($ca_misdemeanor)
    {
        $this->container['ca_misdemeanor'] = $ca_misdemeanor;

        return $this;
    }

    /**
     * Gets ca_wia
     * @return bool
     */
    public function getCaWia()
    {
        return $this->container['ca_wia'];
    }

    /**
     * Sets ca_wia
     * @param bool $ca_wia Whether or not the employee is a recipient of the Workforce Investment Act. Default: false.
     * @return $this
     */
    public function setCaWia($ca_wia)
    {
        $this->container['ca_wia'] = $ca_wia;

        return $this;
    }

    /**
     * Gets sc_fib
     * @return bool
     */
    public function getScFib()
    {
        return $this->container['sc_fib'];
    }

    /**
     * Sets sc_fib
     * @param bool $sc_fib Whether or not the employee is a recipient of South Carolina Family Independence Benefits. Default: false.
     * @return $this
     */
    public function setScFib($sc_fib)
    {
        $this->container['sc_fib'] = $sc_fib;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\RetroTax\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\RetroTax\ObjectSerializer::sanitizeForSerialization($this));
    }
}


