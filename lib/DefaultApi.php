<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  RetroTax
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Retrotax TCID
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2016-12-19T14:06:08Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RetroTax;

use \RetroTax\Configuration;
use \RetroTax\ApiClient;
use \RetroTax\ApiException;
use \RetroTax\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  RetroTax
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{

    /**
     * API Client
     *
     * @var \RetroTax\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \RetroTax\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\RetroTax\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api-qa.retrotax-aci.com');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \RetroTax\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \RetroTax\ApiClient $apiClient set the API client
     *
     * @return DefaultApi
     */
    public function setApiClient(\RetroTax\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation applicationStatusesGet
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\ApplicationStatusesList
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function applicationStatusesGet($x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->applicationStatusesGetWithHttpInfo($x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation applicationStatusesGetWithHttpInfo
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\ApplicationStatusesList, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function applicationStatusesGetWithHttpInfo($x_auth_token = null, $x_auth_iv = null)
    {
        // parse inputs
        $resourcePath = "/application_statuses";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\ApplicationStatusesList',
                '/application_statuses'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\ApplicationStatusesList', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\ApplicationStatusesList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation applicationStatusesStatusCodeGet
     *
     * 
     *
     * @param string $status_code  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\ApplicationStatus
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function applicationStatusesStatusCodeGet($status_code, $x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->applicationStatusesStatusCodeGetWithHttpInfo($status_code, $x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation applicationStatusesStatusCodeGetWithHttpInfo
     *
     * 
     *
     * @param string $status_code  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\ApplicationStatus, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function applicationStatusesStatusCodeGetWithHttpInfo($status_code, $x_auth_token = null, $x_auth_iv = null)
    {
        // verify the required parameter 'status_code' is set
        if ($status_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status_code when calling applicationStatusesStatusCodeGet');
        }
        // parse inputs
        $resourcePath = "/application_statuses/{status_code}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // path params
        if ($status_code !== null) {
            $resourcePath = str_replace(
                "{" . "status_code" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\ApplicationStatus',
                '/application_statuses/{status_code}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\ApplicationStatus', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\ApplicationStatus', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation authenticationDelete
     *
     * 
     *
     * @param string $x_api_key  (optional)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return void
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function authenticationDelete($x_api_key = null, $x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->authenticationDeleteWithHttpInfo($x_api_key, $x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation authenticationDeleteWithHttpInfo
     *
     * 
     *
     * @param string $x_api_key  (optional)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function authenticationDeleteWithHttpInfo($x_api_key = null, $x_auth_token = null, $x_auth_iv = null)
    {
        // parse inputs
        $resourcePath = "/authentication";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-KEY'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/authentication'
            );

            return array($response, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation authenticationPost
     *
     * 
     *
     * @param \RetroTax\SignInRequest $sign_in_request  (required)
     * @param string $x_api_key  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\SignInResponse
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function authenticationPost($sign_in_request, $x_api_key = null, $x_auth_iv = null)
    {
        list($response) = $this->authenticationPostWithHttpInfo($sign_in_request, $x_api_key, $x_auth_iv);
        return $response;
    }

    /**
     * Operation authenticationPostWithHttpInfo
     *
     * 
     *
     * @param \RetroTax\SignInRequest $sign_in_request  (required)
     * @param string $x_api_key  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\SignInResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function authenticationPostWithHttpInfo($sign_in_request, $x_api_key = null, $x_auth_iv = null)
    {
        // verify the required parameter 'sign_in_request' is set
        if ($sign_in_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sign_in_request when calling authenticationPost');
        }
        // parse inputs
        $resourcePath = "/authentication";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-KEY'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($sign_in_request)) {
            $_tempBody = $sign_in_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\SignInResponse',
                '/authentication'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\SignInResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\SignInResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation authenticationUserDetailsGet
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return void
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function authenticationUserDetailsGet($x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->authenticationUserDetailsGetWithHttpInfo($x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation authenticationUserDetailsGetWithHttpInfo
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function authenticationUserDetailsGetWithHttpInfo($x_auth_token = null, $x_auth_iv = null)
    {
        // parse inputs
        $resourcePath = "/authentication/user_details";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/authentication/user_details'
            );

            return array($response, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation branchesGet
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\BranchesResponse
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function branchesGet($x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->branchesGetWithHttpInfo($x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation branchesGetWithHttpInfo
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\BranchesResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function branchesGetWithHttpInfo($x_auth_token = null, $x_auth_iv = null)
    {
        // parse inputs
        $resourcePath = "/branches";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\BranchesResponse',
                '/branches'
            );
            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\BranchesResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\BranchesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdGet
     *
     * 
     *
     * @param string $company_id  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\CompanyResponse
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function companiesCompanyIdGet($company_id, $x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->companiesCompanyIdGetWithHttpInfo($company_id, $x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation companiesCompanyIdGetWithHttpInfo
     *
     * 
     *
     * @param string $company_id  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\CompanyResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function companiesCompanyIdGetWithHttpInfo($company_id, $x_auth_token = null, $x_auth_iv = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $company_id when calling companiesCompanyIdGet');
        }
        // parse inputs
        $resourcePath = "/companies/{company_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                "{" . "company_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($company_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\CompanyResponse',
                '/companies/{company_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\CompanyResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\CompanyResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }


    /**        
    * Operation companiesPost      
     *      
     *      
     *      
     * @param string $x_api_key  (optional)     
     * @param string $x_auth_token  (optional)      
     * @param string $x_auth_iv  (optional)     
     * @return void     
     * @throws \RetroTax\ApiException on non-2xx response       
     */     
    public function companiesPost($company_params, $x_auth_token = null, $x_auth_iv = null, $x_api_key = null)      
    {       
        list($response) = $this->companiesPostWithHttpInfo($company_params, $x_auth_token, $x_auth_iv, $x_api_key);     
        return $response;       
    }       
        
    /**     
     * Operation companiesPostWithHttpInfo      
     *      
     *      
     *      
     * @param string $x_api_key  (optional)     
     * @param string $x_auth_token  (optional)      
     * @param string $x_auth_iv  (optional)     
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)        
     * @throws \RetroTax\ApiException on non-2xx response       
     */     
    public function companiesPostWithHttpInfo($company_params, $x_auth_token = null, $x_auth_iv = null, $x_api_key = null)      
    {       
        // parse inputs     
        $resourcePath = "/companies";       
        $httpBody = $company_params;        
        $queryParams = array();     
        $headerParams = array();        
        $formParams = array();      
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));      
        if (!is_null($_header_accept)) {        
            $headerParams['Accept'] = $_header_accept;      
        }       
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());     
        
        // header params        
        if ($x_api_key !== null) {      
            $headerParams['X-API-KEY'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);      
        }       
        // header params        
        if ($x_auth_token !== null) {       
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);        
        }       
        // header params        
        if ($x_auth_iv !== null) {      
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);      
        }       
        // default format to json       
        $resourcePath = str_replace("{format}", "json", $resourcePath);     
        
        // body params      
        $_tempBody = null;      
        if (isset($company_params)) {       
            $_tempBody = $company_params;       
        }       
                
        // for model (json/xml)     
        if (isset($_tempBody)) {        
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present        
        } elseif (count($formParams) > 0) {     
            $httpBody = $formParams; // for HTTP post (form)        
        }       
        // this endpoint requires API key authentication        
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');       
        if (strlen($apiKey) !== 0) {        
            $headerParams['x-api-key'] = $apiKey;       
        }       
        // make the API Call        
        try {       
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(      
                $resourcePath,      
                'POST',     
                $queryParams,       
                $httpBody,      
                $headerParams,      
                null,       
                '/companies'        
            );      
        
            return array($response, $statusCode, $httpHeader);      
        } catch (ApiException $e) {     
            switch ($e->getCode()) {        
            }       
        
            throw $e;       
        }       
    }

  /**       
     * Operation companiesCompanyIdLocationsPost        
     *      
     *      
     *      
     * @param string $company_id  (required)        
     * @param string $x_api_key  (optional)     
     * @param string $x_auth_token  (optional)      
     * @param string $x_auth_iv  (optional)     
     * @return void     
     * @throws \RetroTax\ApiException on non-2xx response       
     */     
    public function companiesCompanyIdLocationsPost($location_params, $company_id, $x_auth_token = null, $x_api_key = null, $x_auth_iv = null)      
    {       
        list($response) = $this->companiesCompanyIdLocationsPostWithHttpInfo($location_params, $company_id, $x_auth_token, $x_api_key, $x_auth_iv);     
        return $response;       
    }       
        
    /**     
     * Operation companiesCompanyIdLocationsPostWithHttpInfo        
     *      
     *      
     *      
     * @param string $company_id  (required)        
     * @param string $x_api_key  (optional)     
     * @param string $x_auth_token  (optional)      
     * @param string $x_auth_iv  (optional)     
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)        
     * @throws \RetroTax\ApiException on non-2xx response       
     */     
    public function companiesCompanyIdLocationsPostWithHttpInfo($location_params, $company_id, $x_auth_token = null, $x_api_key = null, $x_auth_iv = null)      
    {       
        // verify the required parameter 'company_id' is set        
        if ($company_id === null) {     
            throw new \InvalidArgumentException('Missing the required parameter $company_id when calling companiesCompanyIdLocationsPost');     
        }       
        // parse inputs     
        $resourcePath = "/companies/{company_id}/locations";        
        $httpBody = $location_params;       
        $queryParams = array();     
        $headerParams = array();        
        $formParams = array();      
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));      
        if (!is_null($_header_accept)) {        
            $headerParams['Accept'] = $_header_accept;      
        }       
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());     
        
        // header params        
        if ($x_api_key !== null) {      
            $headerParams['X-API-KEY'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);      
        }       
        // header params        
        if ($x_auth_token !== null) {       
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);        
        }       
        // header params        
        if ($x_auth_iv !== null) {      
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);      
        }       
        // path params      
        if ($company_id !== null) {     
            $resourcePath = str_replace(        
                "{" . "company_id" . "}",       
                $this->apiClient->getSerializer()->toPathValue($company_id),        
                $resourcePath       
            );      
        }       
        // default format to json       
        $resourcePath = str_replace("{format}", "json", $resourcePath);     
        
        // body params      
        $_tempBody = null;      
        if (isset($location_params)) {      
            $_tempBody = $location_params;      
        }       
        
        // for model (json/xml)     
        if (isset($_tempBody)) {        
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present        
        } elseif (count($formParams) > 0) {     
            $httpBody = $formParams; // for HTTP post (form)        
        }       
        // this endpoint requires API key authentication        
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');       
        if (strlen($apiKey) !== 0) {        
            $headerParams['x-api-key'] = $apiKey;       
        }       
        // make the API Call        
        try {       
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(      
                $resourcePath,      
                'POST',     
                $queryParams,       
                $httpBody,      
                $headerParams,      
                null,       
                '/companies/{company_id}/locations'     
            );      
        
            return array(null, $statusCode, $httpHeader);       
        } catch (ApiException $e) {     
            switch ($e->getCode()) {        
            }       
        
            throw $e;       
        }       
    }       
        

    /**
     * Operation companiesCompanyIdLocationsGet
     *
     * 
     *
     * @param string $company_id  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\LocationsResponse
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function companiesCompanyIdLocationsGet($company_id, $x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->companiesCompanyIdLocationsGetWithHttpInfo($company_id, $x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation companiesCompanyIdLocationsGetWithHttpInfo
     *
     * 
     *
     * @param string $company_id  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\LocationsResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function companiesCompanyIdLocationsGetWithHttpInfo($company_id, $x_auth_token = null, $x_auth_iv = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $company_id when calling companiesCompanyIdLocationsGet');
        }
        // parse inputs
        $resourcePath = "/companies/{company_id}/locations";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                "{" . "company_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($company_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\LocationsResponse',
                '/companies/{company_id}/locations'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\LocationsResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\LocationsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation companiesCompanyIdLocationsLocationIdGet
     *
     * 
     *
     * @param string $location_id  (required)
     * @param string $company_id  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_key  (optional)
     * @return \RetroTax\Location
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function companiesCompanyIdLocationsLocationIdGet($location_id, $company_id, $x_auth_token = null, $x_auth_key = null)
    {
        list($response) = $this->companiesCompanyIdLocationsLocationIdGetWithHttpInfo($location_id, $company_id, $x_auth_token, $x_auth_key);
        return $response;
    }

    /**
     * Operation companiesCompanyIdLocationsLocationIdGetWithHttpInfo
     *
     * 
     *
     * @param string $location_id  (required)
     * @param string $company_id  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_key  (optional)
     * @return Array of \RetroTax\Location, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function companiesCompanyIdLocationsLocationIdGetWithHttpInfo($location_id, $company_id, $x_auth_token = null, $x_auth_key = null)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling companiesCompanyIdLocationsLocationIdGet');
        }
        // verify the required parameter 'company_id' is set
        if ($company_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $company_id when calling companiesCompanyIdLocationsLocationIdGet');
        }
        // parse inputs
        $resourcePath = "/companies/{company_id}/locations/{location_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_key !== null) {
            $headerParams['X-AUTH-KEY'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_key);
        }
        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                "{" . "company_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($company_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\Location',
                '/companies/{company_id}/locations/{location_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\Location', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\Location', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation companiesGet
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\CompaniesResponse
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function companiesGet($x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->companiesGetWithHttpInfo($x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation companiesGetWithHttpInfo
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\CompaniesResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function companiesGetWithHttpInfo($x_auth_token = null, $x_auth_iv = null)
    {
        // parse inputs
        $resourcePath = "/companies";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\CompaniesResponse',
                '/companies'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\CompaniesResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\CompaniesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation employeesEmployeeIdDocumentsGet
     *
     * 
     *
     * @param string $employee_id  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @param string $status  (optional)
     * @return \RetroTax\Documents
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function employeesEmployeeIdDocumentsGet($employee_id, $x_auth_token = null, $x_auth_iv = null, $status = null)
    {
        list($response) = $this->employeesEmployeeIdDocumentsGetWithHttpInfo($employee_id, $x_auth_token, $x_auth_iv, $status);
        return $response;
    }

    /**
     * Operation employeesEmployeeIdDocumentsGetWithHttpInfo
     *
     * 
     *
     * @param string $employee_id  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @param string $status  (optional)
     * @return Array of \RetroTax\Documents, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function employeesEmployeeIdDocumentsGetWithHttpInfo($employee_id, $x_auth_token = null, $x_auth_iv = null, $status = null)
    {
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $employee_id when calling employeesEmployeeIdDocumentsGet');
        }
        // parse inputs
        $resourcePath = "/employees/{employee_id}/documents";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                "{" . "employee_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($employee_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\Documents',
                '/employees/{employee_id}/documents'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\Documents', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\Documents', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation employeesEmployeeIdDocumentsPost
     *
     * 
     *
     * @param string $employee_id  (required)
     * @param \RetroTax\PostDocument $post_document  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\DocumentCreateResponse
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function employeesEmployeeIdDocumentsPost($employee_id, $post_document, $x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->employeesEmployeeIdDocumentsPostWithHttpInfo($employee_id, $post_document, $x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation employeesEmployeeIdDocumentsPostWithHttpInfo
     *
     * 
     *
     * @param string $employee_id  (required)
     * @param \RetroTax\PostDocument $post_document  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\DocumentCreateResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function employeesEmployeeIdDocumentsPostWithHttpInfo($employee_id, $post_document, $x_auth_token = null, $x_auth_iv = null)
    {
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $employee_id when calling employeesEmployeeIdDocumentsPost');
        }
        // verify the required parameter 'post_document' is set
        if ($post_document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $post_document when calling employeesEmployeeIdDocumentsPost');
        }
        // parse inputs
        $resourcePath = "/employees/{employee_id}/documents";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                "{" . "employee_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($employee_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($post_document)) {
            $_tempBody = $post_document;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\DocumentCreateResponse',
                '/employees/{employee_id}/documents'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\DocumentCreateResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\DocumentCreateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation employeesEmployeeIdEsignPut
     *
     * 
     *
     * @param string $employee_id  (required)
     * @param \RetroTax\Esign $esign  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\Employee
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function employeesEmployeeIdEsignPut($employee_id, $esign, $x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->employeesEmployeeIdEsignPutWithHttpInfo($employee_id, $esign, $x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation employeesEmployeeIdEsignPutWithHttpInfo
     *
     * 
     *
     * @param string $employee_id  (required)
     * @param \RetroTax\Esign $esign  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\Employee, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function employeesEmployeeIdEsignPutWithHttpInfo($employee_id, $esign, $x_auth_token = null, $x_auth_iv = null)
    {
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $employee_id when calling employeesEmployeeIdEsignPut');
        }
        // verify the required parameter 'esign' is set
        if ($esign === null) {
            throw new \InvalidArgumentException('Missing the required parameter $esign when calling employeesEmployeeIdEsignPut');
        }
        // parse inputs
        $resourcePath = "/employees/{employee_id}/esign";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($x_auth_iv !== null) {
            $queryParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toQueryValue($x_auth_iv);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                "{" . "employee_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($employee_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($esign)) {
            $_tempBody = $esign;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\Employee',
                '/employees/{employee_id}/esign'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\Employee', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\Employee', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation employeesEmployeeIdGet
     *
     * 
     *
     * @param string $employee_id  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\EmployeeResponse
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function employeesEmployeeIdGet($employee_id, $x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->employeesEmployeeIdGetWithHttpInfo($employee_id, $x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation employeesEmployeeIdGetWithHttpInfo
     *
     * 
     *
     * @param string $employee_id  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\EmployeeResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function employeesEmployeeIdGetWithHttpInfo($employee_id, $x_auth_token = null, $x_auth_iv = null)
    {
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $employee_id when calling employeesEmployeeIdGet');
        }
        // parse inputs
        $resourcePath = "/employees/{employee_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                "{" . "employee_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($employee_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\EmployeeResponse',
                '/employees/{employee_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\EmployeeResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\EmployeeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation employeesEmployeeIdPayEntriesGet
     *
     * 
     *
     * @param string $employee_id  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\PayEntriesResponse
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function employeesEmployeeIdPayEntriesGet($employee_id, $x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->employeesEmployeeIdPayEntriesGetWithHttpInfo($employee_id, $x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation employeesEmployeeIdPayEntriesGetWithHttpInfo
     *
     * 
     *
     * @param string $employee_id  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\PayEntriesResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function employeesEmployeeIdPayEntriesGetWithHttpInfo($employee_id, $x_auth_token = null, $x_auth_iv = null)
    {
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $employee_id when calling employeesEmployeeIdPayEntriesGet');
        }
        // parse inputs
        $resourcePath = "/employees/{employee_id}/pay_entries";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                "{" . "employee_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($employee_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\PayEntriesResponse',
                '/employees/{employee_id}/pay_entries'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\PayEntriesResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\PayEntriesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation employeesEmployeeIdPayEntriesPayEntryIdDelete
     *
     * 
     *
     * @param string $pay_entry_id  (required)
     * @param string $employee_id  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return void
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function employeesEmployeeIdPayEntriesPayEntryIdDelete($pay_entry_id, $employee_id, $x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->employeesEmployeeIdPayEntriesPayEntryIdDeleteWithHttpInfo($pay_entry_id, $employee_id, $x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation employeesEmployeeIdPayEntriesPayEntryIdDeleteWithHttpInfo
     *
     * 
     *
     * @param string $pay_entry_id  (required)
     * @param string $employee_id  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function employeesEmployeeIdPayEntriesPayEntryIdDeleteWithHttpInfo($pay_entry_id, $employee_id, $x_auth_token = null, $x_auth_iv = null)
    {
        // verify the required parameter 'pay_entry_id' is set
        if ($pay_entry_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pay_entry_id when calling employeesEmployeeIdPayEntriesPayEntryIdDelete');
        }
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $employee_id when calling employeesEmployeeIdPayEntriesPayEntryIdDelete');
        }
        // parse inputs
        $resourcePath = "/employees/{employee_id}/pay_entries/{pay_entry_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // path params
        if ($pay_entry_id !== null) {
            $resourcePath = str_replace(
                "{" . "pay_entry_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($pay_entry_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                "{" . "employee_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($employee_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/employees/{employee_id}/pay_entries/{pay_entry_id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation employeesEmployeeIdPayEntriesPayEntryIdPut
     *
     * 
     *
     * @param string $pay_entry_id  (required)
     * @param string $employee_id  (required)
     * @param \RetroTax\PostPayEntryRequest $post_pay_entry_request  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\PostPayEntryResponse
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function employeesEmployeeIdPayEntriesPayEntryIdPut($pay_entry_id, $employee_id, $post_pay_entry_request, $x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->employeesEmployeeIdPayEntriesPayEntryIdPutWithHttpInfo($pay_entry_id, $employee_id, $post_pay_entry_request, $x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation employeesEmployeeIdPayEntriesPayEntryIdPutWithHttpInfo
     *
     * 
     *
     * @param string $pay_entry_id  (required)
     * @param string $employee_id  (required)
     * @param \RetroTax\PostPayEntryRequest $post_pay_entry_request  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\PostPayEntryResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function employeesEmployeeIdPayEntriesPayEntryIdPutWithHttpInfo($pay_entry_id, $employee_id, $post_pay_entry_request, $x_auth_token = null, $x_auth_iv = null)
    {
        // verify the required parameter 'pay_entry_id' is set
        if ($pay_entry_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pay_entry_id when calling employeesEmployeeIdPayEntriesPayEntryIdPut');
        }
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $employee_id when calling employeesEmployeeIdPayEntriesPayEntryIdPut');
        }
        // verify the required parameter 'post_pay_entry_request' is set
        if ($post_pay_entry_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $post_pay_entry_request when calling employeesEmployeeIdPayEntriesPayEntryIdPut');
        }
        // parse inputs
        $resourcePath = "/employees/{employee_id}/pay_entries/{pay_entry_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // path params
        if ($pay_entry_id !== null) {
            $resourcePath = str_replace(
                "{" . "pay_entry_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($pay_entry_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                "{" . "employee_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($employee_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($post_pay_entry_request)) {
            $_tempBody = $post_pay_entry_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\PostPayEntryResponse',
                '/employees/{employee_id}/pay_entries/{pay_entry_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\PostPayEntryResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\PostPayEntryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation employeesEmployeeIdPayEntriesPost
     *
     * 
     *
     * @param string $employee_id  (required)
     * @param \RetroTax\PostPayEntryRequest $post_pay_entry_request  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\PostPayEntryResponse
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function employeesEmployeeIdPayEntriesPost($employee_id, $post_pay_entry_request, $x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->employeesEmployeeIdPayEntriesPostWithHttpInfo($employee_id, $post_pay_entry_request, $x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation employeesEmployeeIdPayEntriesPostWithHttpInfo
     *
     * 
     *
     * @param string $employee_id  (required)
     * @param \RetroTax\PostPayEntryRequest $post_pay_entry_request  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\PostPayEntryResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function employeesEmployeeIdPayEntriesPostWithHttpInfo($employee_id, $post_pay_entry_request, $x_auth_token = null, $x_auth_iv = null)
    {
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $employee_id when calling employeesEmployeeIdPayEntriesPost');
        }
        // verify the required parameter 'post_pay_entry_request' is set
        if ($post_pay_entry_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $post_pay_entry_request when calling employeesEmployeeIdPayEntriesPost');
        }
        // parse inputs
        $resourcePath = "/employees/{employee_id}/pay_entries";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                "{" . "employee_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($employee_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($post_pay_entry_request)) {
            $_tempBody = $post_pay_entry_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\PostPayEntryResponse',
                '/employees/{employee_id}/pay_entries'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\PostPayEntryResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\PostPayEntryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation employeesEmployeeIdPut
     *
     * 
     *
     * @param string $employee_id  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\EmployeeResponse
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function employeesEmployeeIdPut($employee_id, $x_auth_token = null, $employee_body=null, $x_auth_iv = null)
    {
        list($response) = $this->employeesEmployeeIdPutWithHttpInfo($employee_id, $x_auth_token, $employee_body, $x_auth_iv);
        return $response;
    }

    /**
     * Operation employeesEmployeeIdPutWithHttpInfo
     *
     * 
     *
     * @param string $employee_id  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\EmployeeResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function employeesEmployeeIdPutWithHttpInfo($employee_id, $x_auth_token = null,$employee_body = null, $x_auth_iv = null)
    {
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $employee_id when calling employeesEmployeeIdPut');
        }
        // parse inputs
        $resourcePath = "/employees/{employee_id}";
        $httpBody = $employee_body;
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                "{" . "employee_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($employee_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\EmployeeResponse',
                '/employees/{employee_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\EmployeeResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\EmployeeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation employeesGet
     *
     * 
     *
     * @param string $missing_documents  (optional)
     * @param string $suppl_program_status  (optional)
     * @param string $location_id  (optional)
     * @param string $status  (optional)
     * @param string $search  (optional)
     * @param string $per_page  (optional)
     * @param string $zone_status  (optional)
     * @param string $x_auth_token  (optional)
     * @param string $application_status  (optional)
     * @param string $to_date  (optional)
     * @param string $x_auth_iv  (optional)
     * @param string $page  (optional)
     * @param string $from_date  (optional)
     * @return \RetroTax\EmployeesResponse
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function employeesGet($x_auth_token = null, $missing_documents = null, $suppl_program_status = null, $location_id = null, $status = null, $search = null, $per_page = null, $zone_status = null, $application_status = null, $to_date = null, $x_auth_iv = null, $page = null, $from_date = null)
    {
        list($response) = $this->employeesGetWithHttpInfo($x_auth_token, $missing_documents, $suppl_program_status, $location_id, $status, $search, $per_page, $zone_status, $application_status, $to_date, $x_auth_iv, $page, $from_date);
        return $response;
    }

    /**
     * Operation employeesGetWithHttpInfo
     *
     * 
     *
     * @param string $missing_documents  (optional)
     * @param string $suppl_program_status  (optional)
     * @param string $location_id  (optional)
     * @param string $status  (optional)
     * @param string $search  (optional)
     * @param string $per_page  (optional)
     * @param string $zone_status  (optional)
     * @param string $x_auth_token  (optional)
     * @param string $application_status  (optional)
     * @param string $to_date  (optional)
     * @param string $x_auth_iv  (optional)
     * @param string $page  (optional)
     * @param string $from_date  (optional)
     * @return Array of \RetroTax\EmployeesResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function employeesGetWithHttpInfo($x_auth_token = null, $missing_documents = null, $suppl_program_status = null, $location_id = null, $status = null, $search = null, $per_page = null, $zone_status = null, $application_status = null, $to_date = null, $x_auth_iv = null, $page = null, $from_date = null)
    {
        // parse inputs
        $resourcePath = "/employees";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($missing_documents !== null) {
            $queryParams['missing_documents'] = $this->apiClient->getSerializer()->toQueryValue($missing_documents);
        }
        // query params
        if ($suppl_program_status !== null) {
            $queryParams['suppl_program_status'] = $this->apiClient->getSerializer()->toQueryValue($suppl_program_status);
        }
        // query params
        if ($location_id !== null) {
            $queryParams['location_id'] = $this->apiClient->getSerializer()->toQueryValue($location_id);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = $this->apiClient->getSerializer()->toQueryValue($per_page);
        }
        // query params
        if ($zone_status !== null) {
            $queryParams['zone_status'] = $this->apiClient->getSerializer()->toQueryValue($zone_status);
        }
        // query params
        if ($application_status !== null) {
            $queryParams['application_status'] = $this->apiClient->getSerializer()->toQueryValue($application_status);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['to_date'] = $this->apiClient->getSerializer()->toQueryValue($to_date);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['from_date'] = $this->apiClient->getSerializer()->toQueryValue($from_date);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\EmployeesResponse',
                '/employees'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\EmployeesResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\EmployeesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation employeesPost
     *
     * 
     *
     * @param \RetroTax\Employee $employee  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\EmployeeResponse
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function employeesPost($employee, $x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->employeesPostWithHttpInfo($employee, $x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation employeesPostWithHttpInfo
     *
     * 
     *
     * @param \RetroTax\Employee $employee  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\EmployeeResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function employeesPostWithHttpInfo($employee, $x_auth_token = null, $x_auth_iv = null)
    {
        // verify the required parameter 'employee' is set
        if ($employee === null) {
            throw new \InvalidArgumentException('Missing the required parameter $employee when calling employeesPost');
        }
        // parse inputs
        $resourcePath = "/employees";
        $httpBody = $employee;
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($employee)) {
            $_tempBody = $employee;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\EmployeeResponse',
                '/employees'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\EmployeeResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\EmployeeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation occupationsGet
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\OccupationsResponse
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function occupationsGet($x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->occupationsGetWithHttpInfo($x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation occupationsGetWithHttpInfo
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\OccupationsResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function occupationsGetWithHttpInfo($x_auth_token = null, $x_auth_iv = null)
    {
        // parse inputs
        $resourcePath = "/occupations";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\OccupationsResponse',
                '/occupations'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\OccupationsResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\OccupationsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsGet
     *
     * 
     *
     * @param string $to_date  (optional)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @param string $location_id  (optional)
     * @param string $from_date  (optional)
     * @return void
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function reportsGet($to_date = null, $x_auth_token = null, $x_auth_iv = null, $location_id = null, $from_date = null)
    {
        list($response) = $this->reportsGetWithHttpInfo($to_date, $x_auth_token, $x_auth_iv, $location_id, $from_date);
        return $response;
    }

    /**
     * Operation reportsGetWithHttpInfo
     *
     * 
     *
     * @param string $to_date  (optional)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @param string $location_id  (optional)
     * @param string $from_date  (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function reportsGetWithHttpInfo($to_date = null, $x_auth_token = null, $x_auth_iv = null, $location_id = null, $from_date = null)
    {
        // parse inputs
        $resourcePath = "/reports";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($to_date !== null) {
            $queryParams['to_date'] = $this->apiClient->getSerializer()->toQueryValue($to_date);
        }
        // query params
        if ($location_id !== null) {
            $queryParams['location_id'] = $this->apiClient->getSerializer()->toQueryValue($location_id);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['from_date'] = $this->apiClient->getSerializer()->toQueryValue($from_date);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/reports'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation statesGet
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\StatesResponse
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function statesGet($x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->statesGetWithHttpInfo($x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation statesGetWithHttpInfo
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\StatesResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function statesGetWithHttpInfo($x_auth_token = null, $x_auth_iv = null)
    {
        // parse inputs
        $resourcePath = "/states";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\StatesResponse',
                '/states'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\StatesResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\StatesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation statesStateCodeCountiesGet
     *
     * 
     *
     * @param string $state_code  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\CountiesResponse
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function statesStateCodeCountiesGet($state_code, $x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->statesStateCodeCountiesGetWithHttpInfo($state_code, $x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation statesStateCodeCountiesGetWithHttpInfo
     *
     * 
     *
     * @param string $state_code  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\CountiesResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function statesStateCodeCountiesGetWithHttpInfo($state_code, $x_auth_token = null, $x_auth_iv = null)
    {
        // verify the required parameter 'state_code' is set
        if ($state_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $state_code when calling statesStateCodeCountiesGet');
        }
        // parse inputs
        $resourcePath = "/states/{state_code}/counties";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // path params
        if ($state_code !== null) {
            $resourcePath = str_replace(
                "{" . "state_code" . "}",
                $this->apiClient->getSerializer()->toPathValue($state_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\CountiesResponse',
                '/states/{state_code}/counties'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\CountiesResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\CountiesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionsGet
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\Subscriptions
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function subscriptionsGet($x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->subscriptionsGetWithHttpInfo($x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation subscriptionsGetWithHttpInfo
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\Subscriptions, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function subscriptionsGetWithHttpInfo($x_auth_token = null, $x_auth_iv = null)
    {
        // parse inputs
        $resourcePath = "/subscriptions";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\Subscriptions',
                '/subscriptions'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\Subscriptions', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\Subscriptions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionsPost
     *
     * 
     *
     * @param \RetroTax\PostSubscription $post_subscription  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\Subscriptions
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function subscriptionsPost($post_subscription, $x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->subscriptionsPostWithHttpInfo($post_subscription, $x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation subscriptionsPostWithHttpInfo
     *
     * 
     *
     * @param \RetroTax\PostSubscription $post_subscription  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\Subscriptions, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function subscriptionsPostWithHttpInfo($post_subscription, $x_auth_token = null, $x_auth_iv = null)
    {
        // verify the required parameter 'post_subscription' is set
        if ($post_subscription === null) {
            throw new \InvalidArgumentException('Missing the required parameter $post_subscription when calling subscriptionsPost');
        }
        // parse inputs
        $resourcePath = "/subscriptions";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($post_subscription)) {
            $_tempBody = $post_subscription;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\Subscriptions',
                '/subscriptions'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\Subscriptions', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\Subscriptions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionsSubscriptionIdDelete
     *
     * 
     *
     * @param string $subscription_id  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\Subscriptions
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function subscriptionsSubscriptionIdDelete($subscription_id, $x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->subscriptionsSubscriptionIdDeleteWithHttpInfo($subscription_id, $x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation subscriptionsSubscriptionIdDeleteWithHttpInfo
     *
     * 
     *
     * @param string $subscription_id  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\Subscriptions, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function subscriptionsSubscriptionIdDeleteWithHttpInfo($subscription_id, $x_auth_token = null, $x_auth_iv = null)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling subscriptionsSubscriptionIdDelete');
        }
        // parse inputs
        $resourcePath = "/subscriptions/{subscription_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscription_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\Subscriptions',
                '/subscriptions/{subscription_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\Subscriptions', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\Subscriptions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionsSubscriptionIdGet
     *
     * 
     *
     * @param string $subscription_id  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\GetSubscription
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function subscriptionsSubscriptionIdGet($subscription_id, $x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->subscriptionsSubscriptionIdGetWithHttpInfo($subscription_id, $x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation subscriptionsSubscriptionIdGetWithHttpInfo
     *
     * 
     *
     * @param string $subscription_id  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\GetSubscription, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function subscriptionsSubscriptionIdGetWithHttpInfo($subscription_id, $x_auth_token = null, $x_auth_iv = null)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling subscriptionsSubscriptionIdGet');
        }
        // parse inputs
        $resourcePath = "/subscriptions/{subscription_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($x_auth_iv !== null) {
            $queryParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toQueryValue($x_auth_iv);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscription_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\GetSubscription',
                '/subscriptions/{subscription_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\GetSubscription', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\GetSubscription', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionsSubscriptionIdPut
     *
     * 
     *
     * @param string $subscription_id  (required)
     * @param \RetroTax\PostSubscription $post_subscription  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\Subscriptions
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function subscriptionsSubscriptionIdPut($subscription_id, $post_subscription, $x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->subscriptionsSubscriptionIdPutWithHttpInfo($subscription_id, $post_subscription, $x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation subscriptionsSubscriptionIdPutWithHttpInfo
     *
     * 
     *
     * @param string $subscription_id  (required)
     * @param \RetroTax\PostSubscription $post_subscription  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\Subscriptions, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function subscriptionsSubscriptionIdPutWithHttpInfo($subscription_id, $post_subscription, $x_auth_token = null, $x_auth_iv = null)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling subscriptionsSubscriptionIdPut');
        }
        // verify the required parameter 'post_subscription' is set
        if ($post_subscription === null) {
            throw new \InvalidArgumentException('Missing the required parameter $post_subscription when calling subscriptionsSubscriptionIdPut');
        }
        // parse inputs
        $resourcePath = "/subscriptions/{subscription_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscription_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($post_subscription)) {
            $_tempBody = $post_subscription;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\Subscriptions',
                '/subscriptions/{subscription_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\Subscriptions', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\Subscriptions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation subscriptionsTypesGet
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\SubscriptionTypes
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function subscriptionsTypesGet($x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->subscriptionsTypesGetWithHttpInfo($x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation subscriptionsTypesGetWithHttpInfo
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\SubscriptionTypes, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function subscriptionsTypesGetWithHttpInfo($x_auth_token = null, $x_auth_iv = null)
    {
        // parse inputs
        $resourcePath = "/subscriptions/types";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\SubscriptionTypes',
                '/subscriptions/types'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\SubscriptionTypes', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\SubscriptionTypes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation supplementaryProgramStatusesGet
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return void
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function supplementaryProgramStatusesGet($x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->supplementaryProgramStatusesGetWithHttpInfo($x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation supplementaryProgramStatusesGetWithHttpInfo
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function supplementaryProgramStatusesGetWithHttpInfo($x_auth_token = null, $x_auth_iv = null)
    {
        // parse inputs
        $resourcePath = "/supplementary_program_statuses";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/supplementary_program_statuses'
            );

            return array($response, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation supplementaryProgramStatusesStatusCodeGet
     *
     * 
     *
     * @param string $status_code  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return void
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function supplementaryProgramStatusesStatusCodeGet($status_code, $x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->supplementaryProgramStatusesStatusCodeGetWithHttpInfo($status_code, $x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation supplementaryProgramStatusesStatusCodeGetWithHttpInfo
     *
     * 
     *
     * @param string $status_code  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function supplementaryProgramStatusesStatusCodeGetWithHttpInfo($status_code, $x_auth_token = null, $x_auth_iv = null)
    {
        // verify the required parameter 'status_code' is set
        if ($status_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status_code when calling supplementaryProgramStatusesStatusCodeGet');
        }
        // parse inputs
        $resourcePath = "/supplementary_program_statuses/{status_code}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // path params
        if ($status_code !== null) {
            $resourcePath = str_replace(
                "{" . "status_code" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/supplementary_program_statuses/{status_code}'
            );

            return array($response, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation supplementaryProgramsGet
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\SupplementaryPrograms
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function supplementaryProgramsGet($x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->supplementaryProgramsGetWithHttpInfo($x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation supplementaryProgramsGetWithHttpInfo
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\SupplementaryPrograms, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function supplementaryProgramsGetWithHttpInfo($x_auth_token = null, $x_auth_iv = null)
    {
        // parse inputs
        $resourcePath = "/supplementary_programs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\SupplementaryPrograms',
                '/supplementary_programs'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\SupplementaryPrograms', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\SupplementaryPrograms', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation supplementaryProgramsSupplementaryProgramCodeGet
     *
     * 
     *
     * @param string $supplementary_program_code  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\SupplementaryProgram
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function supplementaryProgramsSupplementaryProgramCodeGet($supplementary_program_code, $x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->supplementaryProgramsSupplementaryProgramCodeGetWithHttpInfo($supplementary_program_code, $x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation supplementaryProgramsSupplementaryProgramCodeGetWithHttpInfo
     *
     * 
     *
     * @param string $supplementary_program_code  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\SupplementaryProgram, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function supplementaryProgramsSupplementaryProgramCodeGetWithHttpInfo($supplementary_program_code, $x_auth_token = null, $x_auth_iv = null)
    {
        // verify the required parameter 'supplementary_program_code' is set
        if ($supplementary_program_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $supplementary_program_code when calling supplementaryProgramsSupplementaryProgramCodeGet');
        }
        // parse inputs
        $resourcePath = "/supplementary_programs/{supplementary_program_code}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // path params
        if ($supplementary_program_code !== null) {
            $resourcePath = str_replace(
                "{" . "supplementary_program_code" . "}",
                $this->apiClient->getSerializer()->toPathValue($supplementary_program_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\SupplementaryProgram',
                '/supplementary_programs/{supplementary_program_code}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\SupplementaryProgram', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\SupplementaryProgram', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation targetGroupsGet
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\TargetGroups
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function targetGroupsGet($x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->targetGroupsGetWithHttpInfo($x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation targetGroupsGetWithHttpInfo
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\TargetGroups, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function targetGroupsGetWithHttpInfo($x_auth_token = null, $x_auth_iv = null)
    {
        // parse inputs
        $resourcePath = "/target_groups";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\TargetGroups',
                '/target_groups'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\TargetGroups', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\TargetGroups', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation targetGroupsTargetGroupCodeGet
     *
     * 
     *
     * @param string $target_group_code  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\TargetGroup
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function targetGroupsTargetGroupCodeGet($target_group_code, $x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->targetGroupsTargetGroupCodeGetWithHttpInfo($target_group_code, $x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation targetGroupsTargetGroupCodeGetWithHttpInfo
     *
     * 
     *
     * @param string $target_group_code  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\TargetGroup, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function targetGroupsTargetGroupCodeGetWithHttpInfo($target_group_code, $x_auth_token = null, $x_auth_iv = null)
    {
        // verify the required parameter 'target_group_code' is set
        if ($target_group_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $target_group_code when calling targetGroupsTargetGroupCodeGet');
        }
        // parse inputs
        $resourcePath = "/target_groups/{target_group_code}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // path params
        if ($target_group_code !== null) {
            $resourcePath = str_replace(
                "{" . "target_group_code" . "}",
                $this->apiClient->getSerializer()->toPathValue($target_group_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\TargetGroup',
                '/target_groups/{target_group_code}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\TargetGroup', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\TargetGroup', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation usersChangePasswordPut
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return void
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function usersChangePasswordPut($x_auth_token = null, $chnage_password = null)
    {
        list($response) = $this->usersChangePasswordPutWithHttpInfo($x_auth_token, $chnage_password);
        return $response;
    }

    /**
     * Operation usersChangePasswordPutWithHttpInfo
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function usersChangePasswordPutWithHttpInfo($x_auth_token = null, $chnage_password = null)
    {
        // parse inputs
        $resourcePath = "/users/change_password";
        $httpBody = $chnage_password;
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/users/change_password'
            );
            return array($response, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation usersForgotPasswordPost
     *
     * 
     *
     * @param \RetroTax\ForgotPassword $forgot_password  (required)
     * @return void
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function usersForgotPasswordPost($forgot_password)
    {
        list($response) = $this->usersForgotPasswordPostWithHttpInfo($forgot_password);
        return $response;
    }

    /**
     * Operation usersForgotPasswordPostWithHttpInfo
     *
     * 
     *
     * @param \RetroTax\ForgotPassword $forgot_password  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function usersForgotPasswordPostWithHttpInfo($forgot_password)
    {
        // verify the required parameter 'forgot_password' is set
        if ($forgot_password === null) {
            throw new \InvalidArgumentException('Missing the required parameter $forgot_password when calling usersForgotPasswordPost');
        }
        // parse inputs
        $resourcePath = "/users/forgot_password";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($forgot_password)) {
            $_tempBody = $forgot_password;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/users/forgot_password'
            );

            return array($response, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation usersForgotUsernamePost
     *
     * 
     *
     * @param \RetroTax\ForgotUsername $forgot_username  (required)
     * @return void
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function usersForgotUsernamePost($forgot_username)
    {
        list($response) = $this->usersForgotUsernamePostWithHttpInfo($forgot_username);
        return $response;
    }

    /**
     * Operation usersForgotUsernamePostWithHttpInfo
     *
     * 
     *
     * @param \RetroTax\ForgotUsername $forgot_username  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function usersForgotUsernamePostWithHttpInfo($forgot_username)
    {
        // verify the required parameter 'forgot_username' is set
        if ($forgot_username === null) {
            throw new \InvalidArgumentException('Missing the required parameter $forgot_username when calling usersForgotUsernamePost');
        }
        // parse inputs
        $resourcePath = "/users/forgot_username";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($forgot_username)) {
            $_tempBody = $forgot_username;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/users/forgot_username'
            );

            return array($response, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation usersPut
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return void
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function usersPut($x_auth_token = null, $user_update = null)
    {
        list($response) = $this->usersPutWithHttpInfo($x_auth_token, $user_update);
        return $response;
    }

    /**
     * Operation usersPutWithHttpInfo
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function usersPutWithHttpInfo($x_auth_token = null, $user_update = null)
    {
        // parse inputs
        $resourcePath = "/users";
        $httpBody = $user_update;
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/users'
            );

            return array($response, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation zoneStatusesGet
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return void
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function zoneStatusesGet($x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->zoneStatusesGetWithHttpInfo($x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation zoneStatusesGetWithHttpInfo
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function zoneStatusesGetWithHttpInfo($x_auth_token = null, $x_auth_iv = null)
    {
        // parse inputs
        $resourcePath = "/zone_statuses";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/zone_statuses'
            );

            return array($response, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation zoneStatusesStatusCodeGet
     *
     * 
     *
     * @param string $status_code  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return void
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function zoneStatusesStatusCodeGet($status_code, $x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->zoneStatusesStatusCodeGetWithHttpInfo($status_code, $x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation zoneStatusesStatusCodeGetWithHttpInfo
     *
     * 
     *
     * @param string $status_code  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function zoneStatusesStatusCodeGetWithHttpInfo($status_code, $x_auth_token = null, $x_auth_iv = null)
    {
        // verify the required parameter 'status_code' is set
        if ($status_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status_code when calling zoneStatusesStatusCodeGet');
        }
        // parse inputs
        $resourcePath = "/zone_statuses/{status_code}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // path params
        if ($status_code !== null) {
            $resourcePath = str_replace(
                "{" . "status_code" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/zone_statuses/{status_code}'
            );

            return array($response, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation zonesGet
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\Zones
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function zonesGet($x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->zonesGetWithHttpInfo($x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation zonesGetWithHttpInfo
     *
     * 
     *
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\Zones, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function zonesGetWithHttpInfo($x_auth_token = null, $x_auth_iv = null)
    {
        // parse inputs
        $resourcePath = "/zones";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\Zones',
                '/zones'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\Zones', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\Zones', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation zonesZoneCodeGet
     *
     * 
     *
     * @param string $zone_code  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return \RetroTax\Zone
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function zonesZoneCodeGet($zone_code, $x_auth_token = null, $x_auth_iv = null)
    {
        list($response) = $this->zonesZoneCodeGetWithHttpInfo($zone_code, $x_auth_token, $x_auth_iv);
        return $response;
    }

    /**
     * Operation zonesZoneCodeGetWithHttpInfo
     *
     * 
     *
     * @param string $zone_code  (required)
     * @param string $x_auth_token  (optional)
     * @param string $x_auth_iv  (optional)
     * @return Array of \RetroTax\Zone, HTTP status code, HTTP response headers (array of strings)
     * @throws \RetroTax\ApiException on non-2xx response
     */
    public function zonesZoneCodeGetWithHttpInfo($zone_code, $x_auth_token = null, $x_auth_iv = null)
    {
        // verify the required parameter 'zone_code' is set
        if ($zone_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zone_code when calling zonesZoneCodeGet');
        }
        // parse inputs
        $resourcePath = "/zones/{zone_code}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-AUTH-TOKEN'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        // header params
        if ($x_auth_iv !== null) {
            $headerParams['X-AUTH-IV'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_iv);
        }
        // path params
        if ($zone_code !== null) {
            $resourcePath = str_replace(
                "{" . "zone_code" . "}",
                $this->apiClient->getSerializer()->toPathValue($zone_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RetroTax\Zone',
                '/zones/{zone_code}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RetroTax\Zone', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RetroTax\Zone', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
