<?php
/**
 * LocationsResponseList
 *
 * PHP version 5
 *
 * @category Class
 * @package  RetroTax
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Retrotax TCID
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2016-12-19T14:06:08Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RetroTax;

use \ArrayAccess;

/**
 * LocationsResponseList Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     RetroTax
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LocationsResponseList implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LocationsResponse_list';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'float',
        'location_name' => 'string',
        'city' => 'string',
        'address1' => 'string',
        'address2' => 'string',
        'zip' => 'string',
        'primary_contact_extension' => 'string',
        'primary_contact_email' => 'string',
        'primary_contact_phone' => 'string',
        'employee_accounts' => '\RetroTax\LocationsResponseEmployeeAccounts[]',
        'default_position' => '\RetroTax\LocationsResponseDefaultPosition',
        'default_wage' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'id',
        'location_name' => 'location_name',
        'city' => 'city',
        'address1' => 'address1',
        'address2' => 'address2',
        'zip' => 'zip',
        'primary_contact_extension' => 'primary_contact_extension',
        'primary_contact_email' => 'primary_contact_email',
        'primary_contact_phone' => 'primary_contact_phone',
        'employee_accounts' => 'employee_accounts',
        'default_position' => 'default_position',
        'default_wage' => 'default_wage'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'location_name' => 'setLocationName',
        'city' => 'setCity',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'zip' => 'setZip',
        'primary_contact_extension' => 'setPrimaryContactExtension',
        'primary_contact_email' => 'setPrimaryContactEmail',
        'primary_contact_phone' => 'setPrimaryContactPhone',
        'employee_accounts' => 'setEmployeeAccounts',
        'default_position' => 'setDefaultPosition',
        'default_wage' => 'setDefaultWage'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'location_name' => 'getLocationName',
        'city' => 'getCity',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'zip' => 'getZip',
        'primary_contact_extension' => 'getPrimaryContactExtension',
        'primary_contact_email' => 'getPrimaryContactEmail',
        'primary_contact_phone' => 'getPrimaryContactPhone',
        'employee_accounts' => 'getEmployeeAccounts',
        'default_position' => 'getDefaultPosition',
        'default_wage' => 'getDefaultWage'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['location_name'] = isset($data['location_name']) ? $data['location_name'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['address1'] = isset($data['address1']) ? $data['address1'] : null;
        $this->container['address2'] = isset($data['address2']) ? $data['address2'] : null;
        $this->container['zip'] = isset($data['zip']) ? $data['zip'] : null;
        $this->container['primary_contact_extension'] = isset($data['primary_contact_extension']) ? $data['primary_contact_extension'] : null;
        $this->container['primary_contact_email'] = isset($data['primary_contact_email']) ? $data['primary_contact_email'] : null;
        $this->container['primary_contact_phone'] = isset($data['primary_contact_phone']) ? $data['primary_contact_phone'] : null;
        $this->container['employee_accounts'] = isset($data['employee_accounts']) ? $data['employee_accounts'] : null;
        $this->container['default_position'] = isset($data['default_position']) ? $data['default_position'] : null;
        $this->container['default_wage'] = isset($data['default_wage']) ? $data['default_wage'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param float $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets location_name
     * @return string
     */
    public function getLocationName()
    {
        return $this->container['location_name'];
    }

    /**
     * Sets location_name
     * @param string $location_name
     * @return $this
     */
    public function setLocationName($location_name)
    {
        $this->container['location_name'] = $location_name;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets address1
     * @return string
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     * @param string $address1
     * @return $this
     */
    public function setAddress1($address1)
    {
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     * @return string
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     * @param string $address2
     * @return $this
     */
    public function setAddress2($address2)
    {
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets zip
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     * @param string $zip
     * @return $this
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets primary_contact_extension
     * @return string
     */
    public function getPrimaryContactExtension()
    {
        return $this->container['primary_contact_extension'];
    }

    /**
     * Sets primary_contact_extension
     * @param string $primary_contact_extension
     * @return $this
     */
    public function setPrimaryContactExtension($primary_contact_extension)
    {
        $this->container['primary_contact_extension'] = $primary_contact_extension;

        return $this;
    }

    /**
     * Gets primary_contact_email
     * @return string
     */
    public function getPrimaryContactEmail()
    {
        return $this->container['primary_contact_email'];
    }

    /**
     * Sets primary_contact_email
     * @param string $primary_contact_email
     * @return $this
     */
    public function setPrimaryContactEmail($primary_contact_email)
    {
        $this->container['primary_contact_email'] = $primary_contact_email;

        return $this;
    }

    /**
     * Gets primary_contact_phone
     * @return string
     */
    public function getPrimaryContactPhone()
    {
        return $this->container['primary_contact_phone'];
    }

    /**
     * Sets primary_contact_phone
     * @param string $primary_contact_phone
     * @return $this
     */
    public function setPrimaryContactPhone($primary_contact_phone)
    {
        $this->container['primary_contact_phone'] = $primary_contact_phone;

        return $this;
    }

    /**
     * Gets employee_accounts
     * @return \RetroTax\LocationsResponseEmployeeAccounts[]
     */
    public function getEmployeeAccounts()
    {
        return $this->container['employee_accounts'];
    }

    /**
     * Sets employee_accounts
     * @param \RetroTax\LocationsResponseEmployeeAccounts[] $employee_accounts
     * @return $this
     */
    public function setEmployeeAccounts($employee_accounts)
    {
        $this->container['employee_accounts'] = $employee_accounts;

        return $this;
    }

    /**
     * Gets default_position
     * @return \RetroTax\LocationsResponseDefaultPosition
     */
    public function getDefaultPosition()
    {
        return $this->container['default_position'];
    }

    /**
     * Sets default_position
     * @param \RetroTax\LocationsResponseDefaultPosition $default_position
     * @return $this
     */
    public function setDefaultPosition($default_position)
    {
        $this->container['default_position'] = $default_position;

        return $this;
    }

    /**
     * Gets default_wage
     * @return int
     */
    public function getDefaultWage()
    {
        return $this->container['default_wage'];
    }

    /**
     * Sets default_wage
     * @param int $default_wage Default wage of location.
     * @return $this
     */
    public function setDefaultWage($default_wage)
    {
        $this->container['default_wage'] = $default_wage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\RetroTax\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\RetroTax\ObjectSerializer::sanitizeForSerialization($this));
    }
}


