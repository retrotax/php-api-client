<?php
/**
 * EmployeeResponseHiringManagerInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  RetroTax
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Retrotax TCID
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2016-12-19T14:06:08Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RetroTax;

use \ArrayAccess;

/**
 * EmployeeResponseHiringManagerInfo Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     RetroTax
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class EmployeeResponseHiringManagerInfo implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'EmployeeResponse_hiring_manager_info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'occupation_id' => 'int',
        'starting_wage' => 'string',
        'dgi' => '\DateTime',
        'dojo' => '\DateTime',
        'doh' => '\DateTime',
        'dsw' => '\DateTime'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'occupation_id' => 'occupation_id',
        'starting_wage' => 'starting_wage',
        'dgi' => 'dgi',
        'dojo' => 'dojo',
        'doh' => 'doh',
        'dsw' => 'dsw'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'occupation_id' => 'setOccupationId',
        'starting_wage' => 'setStartingWage',
        'dgi' => 'setDgi',
        'dojo' => 'setDojo',
        'doh' => 'setDoh',
        'dsw' => 'setDsw'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'occupation_id' => 'getOccupationId',
        'starting_wage' => 'getStartingWage',
        'dgi' => 'getDgi',
        'dojo' => 'getDojo',
        'doh' => 'getDoh',
        'dsw' => 'getDsw'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['occupation_id'] = isset($data['occupation_id']) ? $data['occupation_id'] : null;
        $this->container['starting_wage'] = isset($data['starting_wage']) ? $data['starting_wage'] : null;
        $this->container['dgi'] = isset($data['dgi']) ? $data['dgi'] : null;
        $this->container['dojo'] = isset($data['dojo']) ? $data['dojo'] : null;
        $this->container['doh'] = isset($data['doh']) ? $data['doh'] : null;
        $this->container['dsw'] = isset($data['dsw']) ? $data['dsw'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets occupation_id
     * @return int
     */
    public function getOccupationId()
    {
        return $this->container['occupation_id'];
    }

    /**
     * Sets occupation_id
     * @param int $occupation_id The code of the employee's job position (e.g. hostess, processor, etc). Obtained from the occupation's resource. Make sure you pass in the code of the occupation.
     * @return $this
     */
    public function setOccupationId($occupation_id)
    {
        $this->container['occupation_id'] = $occupation_id;

        return $this;
    }

    /**
     * Gets starting_wage
     * @return string
     */
    public function getStartingWage()
    {
        return $this->container['starting_wage'];
    }

    /**
     * Sets starting_wage
     * @param string $starting_wage Employee's starting wage.
     * @return $this
     */
    public function setStartingWage($starting_wage)
    {
        $this->container['starting_wage'] = $starting_wage;

        return $this;
    }

    /**
     * Gets dgi
     * @return \DateTime
     */
    public function getDgi()
    {
        return $this->container['dgi'];
    }

    /**
     * Sets dgi
     * @param \DateTime $dgi Date gave information (dgi). U.S. date formats only.
     * @return $this
     */
    public function setDgi($dgi)
    {
        $this->container['dgi'] = $dgi;

        return $this;
    }

    /**
     * Gets dojo
     * @return \DateTime
     */
    public function getDojo()
    {
        return $this->container['dojo'];
    }

    /**
     * Sets dojo
     * @param \DateTime $dojo Date of job offer (dojo). U.S. date formats only.
     * @return $this
     */
    public function setDojo($dojo)
    {
        $this->container['dojo'] = $dojo;

        return $this;
    }

    /**
     * Gets doh
     * @return \DateTime
     */
    public function getDoh()
    {
        return $this->container['doh'];
    }

    /**
     * Sets doh
     * @param \DateTime $doh Date of hire (doh). U.S. date formats only.
     * @return $this
     */
    public function setDoh($doh)
    {
        $this->container['doh'] = $doh;

        return $this;
    }

    /**
     * Gets dsw
     * @return \DateTime
     */
    public function getDsw()
    {
        return $this->container['dsw'];
    }

    /**
     * Sets dsw
     * @param \DateTime $dsw Date started work (dsw). U.S. date formats only.
     * @return $this
     */
    public function setDsw($dsw)
    {
        $this->container['dsw'] = $dsw;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\RetroTax\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\RetroTax\ObjectSerializer::sanitizeForSerialization($this));
    }
}


